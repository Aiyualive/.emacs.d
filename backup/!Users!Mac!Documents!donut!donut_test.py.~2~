import numpy as np
import pandas as pd
from donut import complete_timestamp, standardize_kpi
import tensorflow as tf
from donut import Donut
from tensorflow import keras as K
from tfsnippet.modules import Sequential
from donut import DonutTrainer, DonutPredictor
from keras.layers import Dense

print(tf.__version__)
# Read the raw data.
data = pd.read_csv('train.csv')[:10000]
timestamp = data['timestamp']
#timestamp = timestamp.columns[-1]
#timestamp = timestamp.as_matrix(columns = timestamp.columns[-1])
values = data['value']
labels = data['label']
# If there is no label, simply use all zeros.
#labels = np.zeros_like(values, dtype=np.int32)

#Complete the timestamp, and obtain the missing point indicators.
def rem_dupes(dup_list):
    yooneeks = []
    for elem in dup_list:
        if elem not in yooneeks:
            yooneeks.append(elem)
    return yooneeks

timestamp = rem_dupes(timestamp)
timestamp, missing, (values, labels) = complete_timestamp(timestamp, (values, labels))
#print()
print(missing)

# Split the training and testing data.
test_portion = 0.3
test_n = int(len(values) * test_portion)
train_values, test_values = values[:-test_n], values[-test_n:]
train_labels, test_labels = labels[:-test_n], labels[-test_n:]
#train_missing, test_missing = missing[:-test_n], missing[-test_n:]
train_missing = np.zeros(len(train_values))
test_missing = np.zeros(len(test_values))
# Standardize the training and testing data.
train_values, mean, std = standardize_kpi(
    train_values, excludes=np.logical_or(train_labels, train_missing))
test_values, _, _ = standardize_kpi(test_values, mean=mean, std=std)



# We build the entire model within the scope of `model_vs`,
# it should hold exactly all the variables of `model`, including
# the variables created by Keras layers.
with tf.variable_scope('model') as model_vs:
    model = Donut(
        h_for_p_x=Sequential([
            K.layers.Dense(100, kernel_regularizer=K.regularizers.l2(0.001),
                           activation=tf.nn.relu),
            K.layers.Dense(100, kernel_regularizer=K.regularizers.l2(0.001),
                           activation=tf.nn.relu),
        ]),
        h_for_q_z=Sequential([
            K.layers.Dense(100, kernel_regularizer=K.regularizers.l2(0.001),
                           activation=tf.nn.relu),
            K.layers.Dense(100, kernel_regularizer=K.regularizers.l2(0.001),
                           activation=tf.nn.relu),
        ]),
        x_dims=120,
        z_dims=5,
    )


trainer = DonutTrainer(model=model, model_vs=model_vs, max_epoch=1)
predictor = DonutPredictor(model)

with tf.Session().as_default():
    trainer.fit(train_values, train_labels, train_missing, mean, std)
    test_score = predictor.get_score(test_values, test_missing)



from tfsnippet.utils import get_variables_as_dict, VariableSaver

with tf.Session().as_default():
    # Train the model.
    ...

    # Remember to get the model variables after the birth of a
    # `predictor` or a `trainer`.  The :class:`Donut` instances
    # does not build the graph until :meth:`Donut.get_score` or
    # :meth:`Donut.get_training_loss` is called, which is
    # done in the `predictor` or the `trainer`.
    var_dict = get_variables_as_dict(model_vs)


    # save variables to `save_dir`
    saver = VariableSaver(var_dict, save_dir)
    saver.save()

with tf.Session().as_default():
    # Restore variables from `save_dir`.
    saver = VariableSaver(get_variables_as_dict(model_vs), save_dir)
    saver.restore()

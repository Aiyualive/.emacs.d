import matplotlib as plt
import numpy as np
import random as rnd
import timeit as t
#import sys
#sys.setrecursionlimit(1500)

rnd_max = 2**32-1
rnd.seed(0)

#Lecture1-2 slide 26
def ins_srt(a):
    n = len(a)

    for i in range(1,n):
        x = a[i]
        j = i-1
        while (x < a[j]) and (j >= 0):
            a[j+1] = a[j]
            j -= 1
        a[j+1] = x

    return a

def shell_srt(a):
    n = len(a)
    k = int(n/2)
    while k > 0:
        for i in range(k,n):

            x = a[i]
            j = i
            while  j >= k and a[j-k] > x:
                a[j] = a[j-k]
                j -= k

            # put temp (the original a[i]) in its correct location
            a[j] = x
        k = int(k/2)
    return a

# Lecture slide 70 in SortingAlgorithms
'''def partition(a, p, r):
    x = a[r]
    i = p - 1

    for j in range(p, r):
        if a[j] <= x:
            i += 1
            tmp1 = a[i]
            a[i] = a[j]
            a[j] = tmp1

    tmp2 = a[i+1]
    a[i+1] = a[r]
    a[r] = tmp2
    return (i + 1)

def qck_srt(a, p, r):
    if p < r:
        q = partition(a, p, r)
        qck_srt(a, p, q-1)
        qck_srt(a, q+1, r)
'''




def quicksort(arr, i, j):
  if i < j:
    pos = partition(arr, i, j)
    quicksort(arr, i, pos - 1)
    quicksort(arr, pos + 1, j)


def partition(arr, i, j):
  pivot = arr[j]
  small = i - 1
  for k in range(i, j):
    if arr[k] <= pivot:
      small += 1
      swap(arr, k, small)

  swap(arr, j, small + 1)
  return small + 1


def swap(arr, i, j):
  arr[i], arr[j] = arr[j], arr[i]


#quicksort(arr, 0, len(arr) - 1)
def mrg_srt(a):
    n = len(a)
    if n > 1:
        mid = int(n/2)
        left  = a[:mid]
        right = a[mid:]

        mrg_srt(left)
        mrg_srt(right)

        i = 0
        j = 0
        k = 0

        l_left, l_right = len(left), len(right)
        while i < l_left and j < l_right:
            if left[i] < right[j]:
                a[k]=left[i]
                i += 1
            else:
                a[k]=right[j]
                j +=1
            k += 1
        while j < l_right:
            a[k]=right[j]
            j += 1
            k += 1

        while i < l_left:
            a[k]=left[i]
            i += 1
            k += 1

def rdx_srt(a, n):
    cnt = [0] * 256


def radix_sort(array, base=10):
    def list_to_buckets(array, base, iteration):
        buckets = [[] for x in range(base)]
        for number in array:
            # Isolate the base-digit from the number
            digit = (number // (base ** iteration)) % base
            # Drop the number into the correct bucket
            buckets[digit].append(number)
        return buckets

    def buckets_to_list(buckets):
        numbers = []
        for bucket in buckets:
            # append the numbers in a bucket
            # sequentially to the returned array
            for number in bucket:
                numbers.append(number)
        return numbers

    maxval = max(array)

    it = 0
    # Iterate, sorting the array by each base-digit
    while base ** it <= maxval:
        array = buckets_to_list(list_to_buckets(array, base, it))
        it += 1

    return array

def compare(n):
    a     = [(rnd.randint(0, rnd_max)) for i in range(n)]
    qck_a = a
    mrg_a = a

    #Insertion sort
    start    = t.default_timer()
    tmp      = ins_srt(a)
    stop     = t.default_timer()
    ins_t  = stop - start

    #Shell sort
    start    = t.default_timer()
    tmp      = shell_srt(a)
    stop     = t.default_timer()
    shell_t  = stop - start

    #Quick sort
    start    = t.default_timer()
    tmp      = quicksort(qck_a, 0, len(qck_a)-1)
    stop     = t.default_timer()
    qck_t    = stop - start

    #Merge sort
    start    = t.default_timer()
    tmp      = mrg_srt(a)
    stop     = t.default_timer()
    mrg_t    = stop - start

    #Radix sort
    start    = t.default_timer()
    tmp      = radix_sort(a)
    stop     = t.default_timer()
    rdx_t   = stop - start

    return [ins_t, shell_t, qck_t, mrg_t, rdx_t]

def comparison_data(x):
    l = len(x)
    y = [[0]*5 for i in range(l)]
    for i in range(l):
        y[i] = compare(x[i])
    return y

#x = [10, 10**2, 10**3, 10**4, 10**5, 10**6, 10**7, 10**8, 2*10**8]
x = [10,100,1000]
y = comparison_data(x)
print(y)
